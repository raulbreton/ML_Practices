{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30775,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Importing the dataset**","metadata":{}},{"cell_type":"code","source":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\ngender_submission = pd.read_csv(\"/kaggle/input/titanic/gender_submission.csv\")\ntest = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntrain = pd.read_csv(\"/kaggle/input/titanic/train.csv\")\n\ntest.head(3)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-30T21:24:14.954614Z","iopub.execute_input":"2024-09-30T21:24:14.955139Z","iopub.status.idle":"2024-09-30T21:24:15.002990Z","shell.execute_reply.started":"2024-09-30T21:24:14.955077Z","shell.execute_reply":"2024-09-30T21:24:15.000860Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                              Name     Sex   Age  SibSp  \\\n0          892       3                  Kelly, Mr. James    male  34.5      0   \n1          893       3  Wilkes, Mrs. James (Ellen Needs)  female  47.0      1   \n2          894       2         Myles, Mr. Thomas Francis    male  62.0      0   \n\n   Parch  Ticket    Fare Cabin Embarked  \n0      0  330911  7.8292   NaN        Q  \n1      0  363272  7.0000   NaN        S  \n2      0  240276  9.6875   NaN        Q  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_test= test.iloc[:,:-1]\ny_test = test.iloc[:,-1]\nX_train= train.iloc[:,:-1]\ny_train = train.iloc[:,-1]","metadata":{"execution":{"iopub.status.busy":"2024-09-30T21:24:15.008216Z","iopub.execute_input":"2024-09-30T21:24:15.008780Z","iopub.status.idle":"2024-09-30T21:24:15.021629Z","shell.execute_reply.started":"2024-09-30T21:24:15.008726Z","shell.execute_reply":"2024-09-30T21:24:15.019267Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"# **Split the dataset**","metadata":{}},{"cell_type":"code","source":"\"\"\"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\"\"\"","metadata":{"execution":{"iopub.status.busy":"2024-09-30T21:24:15.023984Z","iopub.execute_input":"2024-09-30T21:24:15.024521Z","iopub.status.idle":"2024-09-30T21:24:15.051436Z","shell.execute_reply.started":"2024-09-30T21:24:15.024421Z","shell.execute_reply":"2024-09-30T21:24:15.048647Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"'from sklearn.model_selection import train_test_split\\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)'"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Taking care of missing data**","metadata":{}},{"cell_type":"code","source":"#Verificar si hay datos nulos\nprint(test.isnull().values.any(),test.isnull().values.any())","metadata":{"execution":{"iopub.status.busy":"2024-09-30T21:24:15.055437Z","iopub.execute_input":"2024-09-30T21:24:15.057640Z","iopub.status.idle":"2024-09-30T21:24:15.070046Z","shell.execute_reply.started":"2024-09-30T21:24:15.057564Z","shell.execute_reply":"2024-09-30T21:24:15.067917Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"True True\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.impute import SimpleImputer\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\nnumeric_cols = ['Pclass', 'Age', 'Fare']\nimputer.fit(X_test[numeric_cols], X_train[numeric_cols])\nX_test[numeric_cols] = imputer.transform(X_test[numeric_cols])\nX_train[numeric_cols] = imputer.transform(X_train[numeric_cols])","metadata":{"execution":{"iopub.status.busy":"2024-09-30T21:40:52.553743Z","iopub.execute_input":"2024-09-30T21:40:52.554296Z","iopub.status.idle":"2024-09-30T21:40:52.579413Z","shell.execute_reply.started":"2024-09-30T21:40:52.554242Z","shell.execute_reply":"2024-09-30T21:40:52.578214Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stdout","text":"True True\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# **Feature Scaling**","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nsc_numeric_cols = ['Age', 'Fare']\n#It's important to train df has to be scaled first\nX_train[sc_numeric_cols] = sc.fit_transform(X_train[sc_numeric_cols])\nX_test[sc_numeric_cols] = sc.fit_transform(X_test[sc_numeric_cols])","metadata":{"execution":{"iopub.status.busy":"2024-09-30T22:00:57.837418Z","iopub.execute_input":"2024-09-30T22:00:57.837897Z","iopub.status.idle":"2024-09-30T22:00:57.860531Z","shell.execute_reply.started":"2024-09-30T22:00:57.837853Z","shell.execute_reply":"2024-09-30T22:00:57.858705Z"},"trusted":true},"execution_count":56,"outputs":[]}]}